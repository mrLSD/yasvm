WHITESPACE 	= _{ " " | "\t" }

// Source code representation
//======================

// Characters
newline 	= { NEWLINE }
unicode_char	= { !newline ~ ANY+ }
unicode_letter 	= { LETTER }
unicode_digit  	= { NUMBER }

// Letters and digits ¶
letter         	= { unicode_letter | "_" }
decimal_digit	= { ASCII_DIGIT }
octal_digit	= { ASCII_OCT_DIGIT }
hex_digit	= { ASCII_HEX_DIGIT }

// Lexical elements ¶
//======================

// Comments
comments 	= _{ ( "//" ~ ANY* ) | ( "/*" ~ ( !"*/" ~ ANY )* ~ "*/" ) }

// Semicolons
semicolon 	= { ";" }

// Identifiers
identifier 	= { !predeclared_identifiers ~ letter+ ~ ( letter | unicode_digit )* }

// Keywords
keywords 	= {
    "break"       | "case"    | "chan"   | "const"     |
    "continue"    | "default" | "defer"  | "else"      |
    "fallthrough" | "for"     | "func"   | "go"        |
    "goto"        | "if"      | "import" | "interface" |
    "map"         | "package" | "range"  | "return"    |
    "select"      | "struct"  | "switch" | "type"      |
    "var"
}

// Operators and punctuation
operators 	= {
    "+"  | "-"   | "*"   | "/"   | "%"  | "&"  |
    "|"  | "^"   | ">>"  | "<<"  | "&^" | "+=" |
    "-=" | "*="  | "/="  | "%="  | "&=" | "|=" |
    "^=" | "<<=" | ">>=" | "&^=" | "&&" |
    "||" | "<-"  | "++"  | "--"  | "==" | "<"  |
    ">"  | "="   | "!"   | "!="  | ">=" | "<=" |
    ":=" | "..." | "("   | ")"   | "["  | "]"  |
    "{"  | "}"   | ","   | "."   | ";"  | ":"
}

// Integer literals
int_lit		= { decimal_lit | octal_lit | hex_lit }
decimal_lit 	= { ASCII_NONZERO_DIGIT ~ decimal_digit }
octal_lit   	= { "0" ~ octal_digit* }
hex_lit     	= { "0" ~ ( "x" | "X" ) ~ hex_digit+ }

// Floating-point literals
float_lit 	= {
	( decimals ~ "." ~ decimals? ~ exponent? ) |
	( decimals ~ exponent ) |
	( "." ~ decimals ~ exponent? )
}
decimals  	= { decimal_digit+ }
exponent  	= { ( "e" | "E" ) ~ ( "+" | "-" )? ~ decimals }

// Imaginary literals
imaginary_lit 	= { ( decimals | float_lit ) ~ "i" }

// Rune literals
rune_lit         = { "'" ~ ( unicode_value | byte_value ) ~ "'" }
unicode_value    = { unicode_char | little_u_value | big_u_value | escaped_char }
byte_value       = { octal_byte_value | hex_byte_value }
octal_byte_value = { "\\" ~ octal_digit{3} }
hex_byte_value   = { "\\" ~ "x" ~ hex_digit{2} }
little_u_value   = { "\\" ~ "u" ~ hex_digit{4} }
big_u_value      = { "\\" ~ "U" ~ hex_digit{8} }
escaped_char     = { "\\" ~ ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"" ) }

// String literals
string_lit             = { raw_string_lit | interpreted_string_lit }
raw_string_lit         = { "`" ~ ( unicode_char | newline )* ~ "`" }
interpreted_string_lit = { "\"" ~ ( unicode_value | byte_value )* ~ "\"" }

// Types
//======================

// Blocks
//======================
Block 		= { "{" ~ StatementList ~ "}" }
StatementList 	= { ( Statement ~ ";"? )* }

// Declarations and scope
//======================

Declaration   	=  { ConstDecl | TypeDecl | VarDecl }
TopLevelDecl  	=  { Declaration | FunctionDecl | MethodDecl }

// Predeclared identifiers
predeclared_identifiers = {
    predeclared_types | predeclared_constants |
    predeclared_zero_value | predeclared_functions
}
predeclared_types = {
    "bool"   | "byte"    | "complex64" | "complex128" |
    "error"  | "float32" | "float64"   | "int"        |
    "int8"   | "int16"   | "int32"     | "int64"      |
    "rune"   | "string"  | "uint"      | "uint8"      |
    "uint16" | "uint32"  | "uint64"    | "uintptr"
}
predeclared_constants = { "true" | "false" | "iota" }
predeclared_zero_value = { "nil" }
predeclared_functions = {
    "append"  | "cap"    | "close"   | "complex" |
    "copy"    | "delete" | "imag"    | "len"     |
    "make"    | "new"    | "panic"   | "print"   |
    "println" | "real"   | "recover"
}

// Constant declarations
ConstDecl      	= { "const" ~ ( ConstSpec | ( "(" ~ ( ConstSpec ~ ";"? )* ~ ")" ) ) }
ConstSpec      	= { IdentifierList ~ ( Type? ~ "=" ~ ExpressionList )? }

IdentifierList 	= { identifier ~ ( "," ~ identifier )* }
ExpressionList 	= { Expression ~ ( "," ~ Expression )* }

// Type declarations
ypeDecl 	= { "type" ~ ( TypeSpec | ( "(" ~ ( TypeSpec ~ ";"? )* ~ ")" ) ) }
TypeSpec 	= { AliasDecl | TypeDef }

// Alias declarations
AliasDecl 	= { identifier ~ "=" ~ Type }

// definitions
TypeDef 	= { identifier ~ Type }

// Variable declarations
VarDecl     	= { "var" ~ ( VarSpec | ( "("  ~ ( VarSpec ~ ";"? )* ~ ")" ) ) }
VarSpec     	= { IdentifierList ~ ( Type ~ ( "=" ~ ExpressionList )? | ( "=" ~ ExpressionList ) ) }

// Short variable declarations
ShortVarDecl 	= { IdentifierList ~ ":=" ~ ExpressionList }

// Function declarations
FunctionDecl 	= { "func" ~ FunctionName ~ Signature ~ FunctionBody? }
FunctionName 	= { identifier }
FunctionBody 	= { Block }

// Method declarations
MethodDecl 	= { "func" ~ Receiver ~ MethodName ~ Signature ~ FunctionBody? }
Receiver   	= { Parameters }

// Expressions
//======================

// Operands
Operand     	= { Literal | OperandName | ( "(" ~ Expression ~ ")" ) }
Literal     	= { BasicLit | CompositeLit | FunctionLit }
BasicLit    	= { int_lit | float_lit | imaginary_lit | rune_lit | string_lit }
OperandName 	= { identifier | QualifiedIdent }

// Qualified identifiers
QualifiedIdent 	= { PackageName ~ "." ~ identifier }

// Composite literals
CompositeLit  	= { LiteralType ~ LiteralValue }
LiteralType   	=  {
	StructType | ArrayType |
	( "[" ~ "..." ~ "]" ~ ElementType ) |
	SliceType | MapType | TypeName
}
LiteralValue  	= { "{" ~ ( ElementList ~ ","? )? ~ "}" }
ElementList   	= { KeyedElement ~ (  "," ~ KeyedElement )* }
KeyedElement  	= { ( Key ~ ":" )? ~ Element }
Key           	= { FieldName | Expression | LiteralValue }
FieldName     	= { identifier }
Element       	= { Expression | LiteralValue }

// Function literals
FunctionLit 	= { "func" ~ Signature ~ FunctionBody }

// Primary expressions
PrimaryExpr 	= {
	Operand |
	Conversion |
	MethodExpr |
	( PrimaryExpr ~ Selector ) |
	( PrimaryExpr ~ Index ) |
	( PrimaryExpr ~ Slice ) |
	( PrimaryExpr ~ TypeAssertion ) |
	( PrimaryExpr ~ Arguments )
}

Selector       	= { "." ~ identifier }
Index          	= { "[" ~ Expression ~ "]" }
Slice          	= {
	( "[" ~ Expression? ~ ":" ~ Expression? ~ "]" ) |
	( "[" ~ Expression? ~ ":" ~ Expression ~ ":" ~ Expression ~"]" )
}
TypeAssertion  	= { "." ~ "(" ~ Type ~ ")" }
Arguments      	= { "(" ~ (
	( ExpressionList | Type ~ ( "," ~ ExpressionList )? )
	~ ( "..." )? ~ ( "," )?
	)? ~ ")"
}

// Method expressions
MethodExpr    	= { ReceiverType ~ "." ~ MethodName }
ReceiverType  	= { Type }

// Operators
Expression 	= { UnaryExpr | ( Expression ~ binary_op ~ Expression ) }
UnaryExpr  	= { PrimaryExpr | ( unary_op ~ UnaryExpr ) }

binary_op  	= { "||" | "&&" | rel_op | add_op | mul_op }
rel_op     	= { "==" | "!=" | "<" | "<=" | ">" | ">=" }
add_op     	= { "+" | "-" | "|" | "^" }
mul_op     	= { "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" }

unary_op   	= { "+" | "-" | "!" | "^" | "*" | "&" | "<-" }

// Conversions
Conversion 	= { Type ~ "(" ~ Expression ~ ( "," )? ~ ")" }

// Statements
//=======================================
Statement 	= {
	Declaration  | LabeledStmt | SimpleStmt      |
	GoStmt       | ReturnStmt  | BreakStmt       |
	ContinueStmt | GotoStmt    | FallthroughStmt |
	Block        | IfStmt      | SwitchStmt      |
	SelectStmt   | ForStmt     | DeferStmt
}

SimpleStmt 	= {
	EmptyStmt  | ExpressionStmt | SendStmt     |
	IncDecStmt | Assignment     | ShortVarDecl
}

// Empty statements
EmptyStmt 	= { ( ) }

// Labeled statements
LabeledStmt 	= { Label ~ ":" ~ Statement }
Label       	= { identifier }

// Expression statements
ExpressionStmt 	= { Expression }

// Send statements
SendStmt 	= { Channel ~ "<-" ~ Expression }
Channel  	= { Expression }

// IncDec statements
IncDecStmt 	= { Expression ~ ( "++" | "--" ) }

// Assignments
Assignment 	= { ExpressionList ~ assign_op ~ ExpressionList }
assign_op 	= { ( add_op | mul_op )? ~ "=" }

// If statements
IfStmt 		= { "if" ~ ( SimpleStmt ~ ";"? )? ~ Expression ~ Block ~ ( "else" ~ ( IfStmt | Block ) )? }

// Switch statements
SwitchStmt 	= { ExprSwitchStmt | TypeSwitchStmt }

// Expression switches
ExprSwitchStmt 	= { "switch" ~ ( SimpleStmt ~ ";"? )? ~ ( Expression )? ~ "{" ~ ExprCaseClause* ~ "}" }
ExprCaseClause 	= { ExprSwitchCase ~ ":" ~ StatementList }
ExprSwitchCase	= { ( "case" ~ ExpressionList ) | "default" }

// Type switches
TypeSwitchStmt  = {
	"switch" ~ ( SimpleStmt ~ ";"? )? ~ TypeSwitchGuard
	~ "{" ~ ( TypeCaseClause )* ~ "}"
}
TypeSwitchGuard = { ( identifier ~ ":=" )? ~ PrimaryExpr ~ "." ~ "(" ~ "type" ~ ")" }
TypeCaseClause  = { TypeSwitchCase ~ ":" ~ StatementList }
TypeSwitchCase  = { ( "case" ~ TypeList ) | "default" }
TypeList        = { Type ~ ( "," ~ Type )* }

// For statements
ForStmt 	= { "for" ~ ( Condition | ForClause | RangeClause )? ~ Block }
Condition 	= { Expression }

// For statements with for clause
ForClause 	= { ( InitStmt )? ~ ";" ~ ( Condition )? ~ ";" ~ ( PostStmt )? }
InitStmt 	= { SimpleStmt }
PostStmt 	= { SimpleStmt }

// For statements with range clause
RangeClause 	= { ( ( ExpressionList ~ "=" ) | ( IdentifierList ~ ":=" ) )? ~ "range" ~ Expression }

// Go statements
GoStmt 		= { "go" ~ Expression }

// Select statements
SelectStmt 	= { "select" ~ "{" ~ CommClause* ~ "}" }
CommClause 	= { CommCase ~ ":" ~ StatementList }
CommCase   	= { "case" ~ ( ( SendStmt | RecvStmt ) | "default" ) }
RecvStmt   	= { ( ExpressionList ~ "=" | IdentifierList ~":=" )? ~ RecvExpr }
RecvExpr   	= { Expression }

// Return statements
ReturnStmt 	= { "return" ~ ExpressionList? }

// Break statements
BreakStmt 	= { "break" ~ Label? }

// Continue statements
ContinueStmt 	= { "continue" ~ Label? }

// Goto statements
GotoStmt 	= { "goto" ~ Label }

// Fallthrough statements
FallthroughStmt = { "fallthrough" }

// Defer statements
DeferStmt 	= { "defer" ~ Expression }

// Packages
//===================================

// Source file organization
SourceFile 	= { PackageClause ~ ";"? ~ ( ImportDecl ~ ";"? )* ~ ( TopLevelDecl ~ ";"? )* }

// Package clause
PackageClause  	= { "package" ~ PackageName }
PackageName    	= { identifier }

// Import declarations
ImportDecl      = { "import" ~ ( ImportSpec | ( "(" ~ ( ImportSpec ~ ";"? )* ~ ")" ) ) }
ImportSpec      = { ( "." | PackageName )? ~ ImportPath }
ImportPath  	= { string_lit }
