WHITESPACE = _{ " " | "\t" }

// Source code representation
//======================

// Characters
newline 	= { NEWLINE }
unicode_char	= { !newline ~ ANY+ }
unicode_letter 	= { LETTER }
unicode_digit  	= { NUMBER }

// Letters and digits ¶
letter         	= { unicode_letter | "_" }
decimal_digit	= { ASCII_DIGIT }
octal_digit	= { ASCII_OCT_DIGIT }
hex_digit	= { ASCII_HEX_DIGIT }

// Lexical elements ¶
//======================

// Comments
comments = _{ ( "//" ~ ANY* ) | ( "/*" ~ ( !"*/" ~ ANY )* ~ "*/" ) }

// Semicolons
semicolon = { ";" }

// Identifiers
identifier = { letter+ ~ ( letter | unicode_digit )* }

keywords = {
    "break" | "case" | "chan" | "const" | "continue" |
    "default" | "defer" | "else" | "fallthrough" | "for"
}
operators = {
    "+" | "-" | "*" | "/" | "%" | "&"
}

// Integer literals ¶
int_lit		= { decimal_lit | octal_lit | hex_lit }
decimal_lit 	= { ASCII_NONZERO_DIGIT ~ decimal_digit }
octal_lit   	= { "0" ~ octal_digit* }
hex_lit     	= { "0" ~ ( "x" | "X" ) ~ hex_digit+ }

// Floating-point literals
float_lit 	= {
	( decimals ~ "." ~ decimals? ~ exponent? ) |
	( decimals ~ exponent ) |
	( "." ~ decimals ~ exponent? )
}
decimals  	= { decimal_digit+ }
exponent  	= { ( "e" | "E" ) ~ ( "+" | "-" )? ~ decimals }

// Declarations and scope
//======================

// Predeclared identifiers

predeclared_identifiers = {
    predeclared_types | predeclared_constants |
    predeclared_zero_value | predeclared_functions
}
predeclared_types = {
    "bool"   | "byte"    | "complex64" | "complex128" |
    "error"  | "float32" | "float64"   | "int"        |
    "int8"   | "int16"   | "int32"     | "int64"      |
    "rune"   | "string"  | "uint"      | "uint8"      |
    "uint16" | "uint32"  | "uint64"    | "uintptr"
}
predeclared_constants = { "true" | "false" | "iota" }
predeclared_zero_value = { "nil" }
predeclared_functions = {
    "append"  | "cap"    | "close"   | "complex" |
    "copy"    | "delete" | "imag"    | "len"     |
    "make"    | "new"    | "panic"   | "print"   |
    "println" | "real"   | "recover"
}